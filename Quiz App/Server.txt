
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>

#define PORT 8080
#define MAX_CLIENTS 5
#define BUFFER_SIZE 1024

typedef struct {
    char question[256];
    char options[4][100];
    char correct_answer;
} Question;

typedef struct {
    int socket;
    char username[50];
    int score;
} Client;

Question quiz[] = {
    {"What is the capital of France?", {"A) Paris", "B) Madrid", "C) Berlin", "D) Rome"}, 'A'},
    {"Which planet is known as the Red Planet?", {"A) Earth", "B) Mars", "C) Jupiter", "D) Saturn"}, 'B'},
    {"Who wrote 'Hamlet'?", {"A) Dickens", "B) Hemingway", "C) Shakespeare", "D) Tolstoy"}, 'C'}
};
int question_count = 3;

Client clients[MAX_CLIENTS];
int client_count = 0;

pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER;

void send_to_client(int client_socket, const char *message) {
    send(client_socket, message, strlen(message), 0);
}

void broadcast(const char *message) {
    pthread_mutex_lock(&clients_mutex);
    for (int i = 0; i < client_count; i++) {
        send_to_client(clients[i].socket, message);
    }
    pthread_mutex_unlock(&clients_mutex);
}

void *handle_client(void *arg) {
    int client_socket = *((int *)arg);
    free(arg);

    char buffer[BUFFER_SIZE];
    int score = 0;

    for (int i = 0; i < question_count; i++) {
        snprintf(buffer, sizeof(buffer), "Question %d: %s\n%s\n%s\n%s\n%s\nAnswer: ", i + 1, quiz[i].question, quiz[i].options[0], quiz[i].options[1], quiz[i].options[2], quiz[i].options[3]);
        send_to_client(client_socket, buffer);

        int bytes_received = recv(client_socket, buffer, sizeof(buffer), 0);
        if (bytes_received <= 0) {
            break;
        }
        buffer[bytes_received] = '\0';

        if (buffer[0] == quiz[i].correct_answer) {
            score++;
            send_to_client(client_socket, "Correct!\n");
        } else {
            send_to_client(client_socket, "Wrong!\n");
        }
    }

    snprintf(buffer, sizeof(buffer), "Your final score: %d/%d\n", score, question_count);
    send_to_client(client_socket, buffer);

    close(client_socket);
    pthread_mutex_lock(&clients_mutex);
    for (int i = 0; i < client_count; i++) {
        if (clients[i].socket == client_socket) {
            clients[i] = clients[--client_count];
            break;
        }
    }
    pthread_mutex_unlock(&clients_mutex);

    return NULL;
}

int main() {
    int server_socket, new_socket;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len = sizeof(client_addr);

    if ((server_socket = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket failed");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    if (listen(server_socket, MAX_CLIENTS) < 0) {
        perror("Listen failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    printf("Quiz server is running on port %d...\n", PORT);

    while (1) {
        if ((new_socket = accept(server_socket, (struct sockaddr *)&client_addr, &addr_len)) < 0) {
            perror("Accept failed");
            continue;
        }

        pthread_mutex_lock(&clients_mutex);
        if (client_count == MAX_CLIENTS) {
            send_to_client(new_socket, "Server is full. Try again later.\n");
            close(new_socket);
        } else {
            clients[client_count++].socket = new_socket;
            pthread_t thread;
            int *client_sock = malloc(sizeof(int));
            *client_sock = new_socket;
            pthread_create(&thread, NULL, handle_client, client_sock);
            pthread_detach(thread);
        }
        pthread_mutex_unlock(&clients_mutex);
    }

    return 0;
}